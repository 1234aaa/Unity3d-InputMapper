//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using ws.winx.platform;
using System.Runtime.InteropServices;
using ws.winx.devices;
using UnityEngine;


		public class XInputDriver:IJoystickDriver
		{
			
                XInputState state;
                IHIDInterface _hidInterface;
                int _lastFrameNum = -1;
                IntPtr xInputStatePtr;

                private const float XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE =  0.239f;//7849;
                private const float XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE = 0.265f;//8689
                private const float XINPUT_GAMEPAD_TRIGGER_THRESHOLD = 0.117f;// 30;
                private const float ERROR_SUCCESS = 0;



				public XInputDriver ()
				{
		            xInputStatePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(XInputState)));
                      
				}

	#region IJoystickDriver implementation

            public void Update(IJoystickDevice joystick)
			//public void Update (IJoystickDevice<ws.winx.devices.IAxisDetails, ws.winx.devices.IButtonDetails, ws.winx.devices.IDeviceExtension> joystick)
			{
                GamePad gamePad;

                 //don't update in same frame twice
                    if (_lastFrameNum == Time.frameCount)
                        return;
			        else _lastFrameNum=Time.frameCount;

                    


                   if (UnsafeNativeMethods.XInputGamePadGetState((uint)joystick.ID, xInputStatePtr)== 0)
                    {
                        state = (XInputState)Marshal.PtrToStructure(xInputStatePtr, typeof(XInputState));
                        gamePad = state.Gamepad;

                      

                        //////////////////////////////////// BUTTONS ////////////////////////////////////////
                        joystick.Buttons[0].value = (float)(gamePad.dwButtons &  (ushort)ButtonsFlags.XINPUT_GAMEPAD_START);
                        joystick.Buttons[1].value = (float)(gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_BACK);
                        joystick.Buttons[2].value = (float)(gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_LEFT_THUMB);
                        joystick.Buttons[3].value = (float)(gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_RIGHT_THUMB);
                        joystick.Buttons[4].value = (float)(gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_LEFT_SHOULDER);
                        joystick.Buttons[5].value = (float)(gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_RIGHT_SHOULDER);
                        joystick.Buttons[6].value = (float)(gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_A);
                        joystick.Buttons[7].value = (float)(gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_B);
                        joystick.Buttons[8].value = (float)(gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_X);
                        joystick.Buttons[9].value = (float)(gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_Y);



                        //////////////////////////////  POV ////////////////////////////////////////
                        float x = 0, y = 0;

                        if ((gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_DPAD_UP) != 0) y = 1;
                        else if ((gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_DPAD_DOWN) != 0) y = -1;

                        if ((gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_DPAD_LEFT) != 0) x = -1;
                        else if ((gamePad.dwButtons & (ushort)ButtonsFlags.XINPUT_GAMEPAD_DPAD_RIGHT) != 0) x = 1;

                        joystick.Axis[JoystickAxis.AxisPovX].value = x;
                        joystick.Axis[JoystickAxis.AxisPovY].value = y;




                        ////////////////////////// AXIS //////////////////////////////////
                        IAxisDetails axisDetails;

                        axisDetails = joystick.Axis[JoystickAxis.AxisX];
                        axisDetails.value = CalculateOffset((float)gamePad.sThumbLX, axisDetails.min, axisDetails.max);


                        axisDetails = joystick.Axis[JoystickAxis.AxisY];
                        axisDetails.value = CalculateOffset((float)gamePad.sThumbLY, axisDetails.min, axisDetails.max);


                        axisDetails = joystick.Axis[JoystickAxis.AxisZ];
                        axisDetails.value = CalculateOffset((float)gamePad.sThumbRX, axisDetails.min, axisDetails.max);


                        axisDetails = joystick.Axis[JoystickAxis.AxisR];
                        axisDetails.value = CalculateOffset((float)gamePad.sThumbRY, axisDetails.min, axisDetails.max);

                        axisDetails = joystick.Axis[JoystickAxis.AxisU];
                        axisDetails.value = CalculateOffset((float)gamePad.bLeftTrigger, axisDetails.min, axisDetails.max);

                        axisDetails = joystick.Axis[JoystickAxis.AxisV];
                        axisDetails.value = CalculateOffset((float)gamePad.bRightTrigger, axisDetails.min, axisDetails.max);



                    }


                       



			}

            public IJoystickDevice ResolveDevice(IHIDDeviceInfo info)
			//public IJoystickDevice<IAxisDetails, IButtonDetails, IDeviceExtension> ResolveDevice(IHIDDeviceInfo info)
			{
				
                //!!! Make your own recognition of XBOX Devices
				if(info.PID!=64206 || info.VID!=65261) return null;

                JoystickDevice joystick;
                int inx = 0;

				_hidInterface=info.hidInterface;


                joystick = new JoystickDevice(info.id, 8, 10);
               

                //inti button structure
                for (; inx < 10; inx++)
                {
                    joystick.Buttons[inx] = new ButtonDetails();
                }

               

                AxisDetails axisDetails;
               
                //LX
                    axisDetails = new AxisDetails();
                    axisDetails.max = 32767;
                    axisDetails.min = -32767;
                    joystick.Axis[JoystickAxis.AxisX] = axisDetails;

                //LY
                    axisDetails = new AxisDetails();
                    axisDetails.max = 32767;
                    axisDetails.min = -32767;
                    joystick.Axis[JoystickAxis.AxisY] = axisDetails;

                //RX
                    axisDetails = new AxisDetails();
                    axisDetails.max = 32767;
                    axisDetails.min = -32767;
                    joystick.Axis[JoystickAxis.AxisZ] = axisDetails;

                //RY
                    axisDetails = new AxisDetails();
                    axisDetails.max = 32767;
                    axisDetails.min = -32767;
                    joystick.Axis[JoystickAxis.AxisR] = axisDetails;


		          //TRIGGERS
                    axisDetails = new AxisDetails();
                    axisDetails.max = 255;
                    axisDetails.min = 0;
                    joystick.Axis[JoystickAxis.AxisU] = axisDetails;

                    axisDetails = new AxisDetails();
                    axisDetails.max = 255;
                    axisDetails.min = 0;
                    joystick.Axis[JoystickAxis.AxisV] = axisDetails;

					//POV
					axisDetails = new AxisDetails();
					axisDetails.isHat=true;
					joystick.Axis[JoystickAxis.AxisPovX] = axisDetails;
					axisDetails = new AxisDetails();
					axisDetails.isHat=true;
					joystick.Axis[JoystickAxis.AxisPovY] = axisDetails;


                    return joystick;
		        //return (IJoystickDevice<AxisDetails, ButtonDetails, XInputExtension>)joystick;
			}
	#endregion



            private float CalculateOffset(float pos, int min, int max, float dreadZone = 0.001f)
            {
                //UnityEngine.Debug.Log(Min[axis]+" Max:"+Max[axis]);

                float offset = (2 * (pos - min)) / (max - min) - 1;
                if (offset > 1)
                    return 1;
                else if (offset < -1)
                    return -1;
                else if (offset < dreadZone && offset > -dreadZone)
                    return 0;
                else
                    return offset;
            }


	internal struct Vibration
	{
		public ushort LeftMotorSpeed;
		public ushort RightMotorSpeed;
		public Vibration(ushort left, ushort right)
		{
			this.LeftMotorSpeed = left;
			this.RightMotorSpeed = right;
		}
	}





    public struct GamePad
    {
        public ushort dwButtons;
        public byte bLeftTrigger;
        public byte bRightTrigger;
        public short sThumbLX;
        public short sThumbLY;
        public short sThumbRX;
        public short sThumbRY;
    }


    public enum ButtonsFlags:ushort
    {
        XINPUT_GAMEPAD_DPAD_UP = 0x00000001,
        XINPUT_GAMEPAD_DPAD_DOWN = 0x00000002,
        XINPUT_GAMEPAD_DPAD_LEFT = 0x00000004,
        XINPUT_GAMEPAD_DPAD_RIGHT = 0x00000008,
        XINPUT_GAMEPAD_START = 0x00000010,
        XINPUT_GAMEPAD_BACK = 0x00000020,
        XINPUT_GAMEPAD_LEFT_THUMB = 0x00000040,
        XINPUT_GAMEPAD_RIGHT_THUMB = 0x00000080,
        XINPUT_GAMEPAD_LEFT_SHOULDER = 0x0100,
        XINPUT_GAMEPAD_RIGHT_SHOULDER = 0x0200,
        XINPUT_GAMEPAD_A = 0x1000,
        XINPUT_GAMEPAD_B = 0x2000,
        XINPUT_GAMEPAD_X = 0x4000,
        XINPUT_GAMEPAD_Y = 0x8000
    }


  


    public struct XInputState
    {
        public uint dwPacketNumber;
        public GamePad Gamepad;


    }


	


	static class UnsafeNativeMethods
	{
        internal const string DLLName = "XInputInterface";

        [DllImport(DLLName)]
        public static extern uint XInputGamePadGetState(uint playerIndex, IntPtr state);
        [DllImport(DLLName)]
        public static extern void XInputGamePadSetState(uint playerIndex, float leftMotor, float rightMotor);

	}



    #region ButtonDetails
    public sealed class ButtonDetails : IButtonDetails
    {

        #region Fields

        float _value;
        uint _uid;
        JoystickButtonState _buttonState;

        #region IDeviceDetails implementation


        public uint uid
        {
            get
            {
                return _uid;
            }
            set
            {
                _uid = value;
            }
        }




        public JoystickButtonState buttonState
        {
            get { return _buttonState; }
        }



        public float value
        {
            get
            {
                return _value;
                //return (_buttonState==JoystickButtonState.Hold || _buttonState==JoystickButtonState.Down);
            }
            set
            {

                _value = value;
                //if pressed==TRUE
                //TODO check the code with triggers
                if (value > 0)
                {
                    if (_buttonState == JoystickButtonState.None
                        || _buttonState == JoystickButtonState.Up)
                    {

                        _buttonState = JoystickButtonState.Down;



                    }
                    else
                    {
                        //if (buttonState == JoystickButtonState.Down)
                        _buttonState = JoystickButtonState.Hold;

                    }


                }
                else
                { //
                    if (_buttonState == JoystickButtonState.Down
                        || _buttonState == JoystickButtonState.Hold)
                    {
                        _buttonState = JoystickButtonState.Up;
                    }
                    else
                    {//if(buttonState==JoystickButtonState.Up){
                        _buttonState = JoystickButtonState.None;
                    }

                }
            }
        }
        #endregion
        #endregion

        #region Constructor
        public ButtonDetails(uint uid = 0) { this.uid = uid; }
        #endregion






    }

    #endregion

    #region AxisDetails
    public sealed class AxisDetails : IAxisDetails
    {

        #region Fields
        float _value;
        int _uid;
        int _min;
        int _max;
        JoystickButtonState _buttonState;
        bool _isNullable;
        bool _isHat;


        #region IAxisDetails implementation


        public int min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }


        public int max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }


        public bool isNullable
        {
            get
            {
                return _isNullable;
            }
            set
            {
                _isNullable = value;
            }
        }


        public bool isHat
        {
            get
            {
                return _isHat;
            }
            set
            {
                _isHat = value;
            }
        }


        #endregion


        #region IDeviceDetails implementation


        public uint uid
        {
            get
            {
                throw new NotImplementedException();
            }
            set
            {
                throw new NotImplementedException();
            }
        }


        #endregion

        public JoystickButtonState buttonState
        {
            get { return _buttonState; }
        }
        public float value
        {
            get { return _value; }
            set
            {

                if (value == 0)
                {
                    if (_buttonState == JoystickButtonState.Down
                        || _buttonState == JoystickButtonState.Hold)
                    {

                        //axis float value isn't yet update so it have value before getting 0
                        if (_value > 0)//0 come after positive values
                            _buttonState = JoystickButtonState.PosToUp;
                        else
                            _buttonState = JoystickButtonState.NegToUp;

                    }
                    else
                    {//if(buttonState==JoystickButtonState.Up){
                        _buttonState = JoystickButtonState.None;
                    }


                }
                else
                {
                    if (_buttonState == JoystickButtonState.None
                        || _buttonState == JoystickButtonState.Up)
                    {

                        _buttonState = JoystickButtonState.Down;

                    }
                    else
                    {
                        _buttonState = JoystickButtonState.Hold;
                    }


                }

                _value = value;



            }//set
        }

        #endregion

    }

    #endregion



    sealed class XInputExtension : IDeviceExtension
    {

    }



               
}


