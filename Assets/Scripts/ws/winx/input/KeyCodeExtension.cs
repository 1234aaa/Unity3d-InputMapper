//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using ws.winx.devices;

namespace ws.winx.input
{
//	public static class KeyCodeExtension{
//						public static int CODE_DATA_SHIFT = 5;
//						public static int CODE_AXIS_MASK = 0x1E0;
//						public static int CODE_AXIS_SHIFT = 4;
//						public static int CODE_DATA_MASK = 0x1F;
//						public static int CODE_ID_SHIFT = CODE_DATA_SHIFT + CODE_AXIS_SHIFT;//Default 9;
//						public readonly static int MAX_KEY_CODE=(int)KeyCode.Joystick4Button19+1;
//
//						public int CODE_DATA_SHIFT1 = 5;
//	
//						/// <summary>
//						/// Tos the code.
//						/// </summary>
//						/// <returns>The code.</returns>
//						/// <param name="joy">Joy.</param>
//						/// <param name="axis">Axis.</param>
//						/// <param name="data">Data.</param>
//						public static int toCode (this KeyCode code, Joysticks joy, JoystickAxis axis, int data)
//						{
//								UnityEngine.Debug.Log("Test"+joy+" "+axis+" "+data);
//								return InputCodes.MAX_KEY_CODE + ((((int)joy << CODE_AXIS_SHIFT | (int)axis) << CODE_DATA_SHIFT) | data);
//						}
//		
//		
//
//	}


//	partial public class UnityEngine.KeyCode
//	{
//		public static string MIle;
//	}



		public static class KeyCodeExtension
		{

				public static int CODE_DATA_SHIFT = 5;
				public static int CODE_AXIS_MASK = 0x1E0;
				public static int CODE_AXIS_SHIFT = 4;
				public static int CODE_DATA_MASK = 0x1F;
				public static int CODE_ID_SHIFT = CODE_DATA_SHIFT + CODE_AXIS_SHIFT;//Default 9;
				public readonly static int MAX_KEY_CODE=(int)KeyCode.Joystick4Button19+1;
				
				public static JoystickAxis toAxis (this KeyCode keycode,int code){
					return toAxis(code);
				}

				public static JoystickAxis toAxis (int code)
				{
						code -= KeyCodeExtension.MAX_KEY_CODE;
						return (JoystickAxis)((code & CODE_AXIS_MASK) >> CODE_DATA_SHIFT);
				}
				
				public static int toJoystickID (int code)
				{
						code -= KeyCodeExtension.MAX_KEY_CODE;
						return code >> CODE_ID_SHIFT;
				}
				
				public static int toData (int code)
				{
						code -= KeyCodeExtension.MAX_KEY_CODE;
						return code & CODE_DATA_MASK;
				}

				public static string toEnumString (int code)
				{
						code -= KeyCodeExtension.MAX_KEY_CODE;

						JoystickAxis axis = (JoystickAxis)((code & CODE_AXIS_MASK) >> CODE_DATA_SHIFT);
						string data;
			
						if (axis == JoystickAxis.None)
								return ((Joysticks)(code >> CODE_ID_SHIFT)).ToString () + "Button" + (code & CODE_DATA_MASK);
			
						if (axis == JoystickAxis.AxisPovX || axis == JoystickAxis.AxisPovY) {
								data = ((JoystickPovPosition)(((code & CODE_DATA_MASK) + 1) * ((int)JoystickPovPosition.Right))).ToString ();
						} else {
								data = ((JoystickPosition)(code & CODE_DATA_MASK)).ToString ();
						}
			
			
			
			
						return ((Joysticks)(code >> CODE_ID_SHIFT)).ToString () + axis.ToString () + data;
				}

				public static int toCode (KeyCode code)
				{
						string cString = code.ToString ();
		
						//if code is KeyCode.Joystick<Something>
						if (cString.IndexOf ("Joy") > -1) {
								int inx;
								Joysticks iJoystick;
								inx = cString.IndexOf ("B");
								
								string sJoystick = cString.Substring (0, inx);
								if (sJoystick.Length > 8) {//Joystick<somenumber> -1 to 1-indexed Joysticks
										iJoystick = (Joysticks)(int.Parse (sJoystick.Substring (8, inx - 8)));
								} else {
										iJoystick = Joysticks.Joystick;

								}
				
								return KeyCodeExtension.toCode (iJoystick, JoystickAxis.None, Convert.ToInt32 (cString.Substring (inx + 6, cString.Length - (inx + 6))));

						} else 
								return (int)code;
				  
				}
		
				/// <summary>
				/// Tos the code.
				/// </summary>
				/// <returns>The code.</returns>
				/// <param name="joy">Joy.</param>
				/// <param name="axis">Axis.</param>
				/// <param name="pos">Position.</param>
				public static int toCode (Joysticks joy, JoystickAxis axis, JoystickPosition pos)
				{
						return toCode (joy, axis, (int)pos);
				}
		
		
				/// <summary>
				/// Tos the code.
				/// </summary>
				/// <returns>The code.</returns>
				/// <param name="joy">Joy.</param>
				/// <param name="axis">Axis.</param>
				/// <param name="data">Data. JoystickPovPosition  </param>
				public static int toCode (Joysticks joy, JoystickAxis axis, JoystickPovPosition pos)
				{

							return toCode (joy, axis,Mathf.CeilToInt((int)pos*0.00011f)-1);
						//return toCode (joy, axis,((int)pos/9000-1) );
				}
		
				/// <summary>
				/// String code like(Joystick1Button13 or Joystick9AxisYNegative or Joystick10AxisPovXLeft...) to int code 
				/// </summary>
				/// <returns>Integer of the code.</returns>
				/// <param name="code">Code.</param>
				public static int toCode (string code)
				{
						int inx;
			
			
			            //Button found
						if ((inx = code.IndexOf ("Bu")) > -1) {
								return toCode ((Joysticks)Enum.Parse (typeof(Joysticks), code.Substring (0, inx)), JoystickAxis.None, Convert.ToInt32 (code.Substring (inx + 6, code.Length - (inx + 6))));
						} else if ((inx = code.IndexOf ("Pov")) > -1) {//found POV
								return toCode ((Joysticks)Enum.Parse (typeof(Joysticks), code.Substring (0, inx - 4)),
				               (JoystickAxis)Enum.Parse (typeof(JoystickAxis), code.Substring (inx - 4, 8)),
				               ((int)(JoystickPovPosition)Enum.Parse (typeof(JoystickPovPosition), code.Substring (inx + 4, code.Length - (inx + 4)))) / (int)JoystickPovPosition.Right - 1);
						} else if ((inx = code.IndexOf ("A")) > -1) {//found Axis
								return toCode ((Joysticks)Enum.Parse (typeof(Joysticks), code.Substring (0, inx)),
				               (JoystickAxis)Enum.Parse (typeof(JoystickAxis), code.Substring (inx, 5)),
				               (int)(JoystickPosition)Enum.Parse (typeof(JoystickPosition), code.Substring (inx + 5, code.Length - (inx + 5))));
						}
			
						throw new Exception (code + " not recognized as InputCodes Enum");
			
						//return 0;
				}
		
				/// <summary>
				/// Tos the code.
				/// </summary>
				/// <returns>The code.</returns>
				/// <param name="joy">Joy.</param>
				/// <param name="axis">Axis.</param>
				/// <param name="data">Data.</param>
				public static int toCode (Joysticks joy, JoystickAxis axis, int data)
				{
//						UnityEngine.Debug.Log("Test"+joy+" "+axis+" "+data);
						return KeyCodeExtension.MAX_KEY_CODE + ((((int)joy << CODE_AXIS_SHIFT | (int)axis) << CODE_DATA_SHIFT) | data);
				}

		                          
		}
}

